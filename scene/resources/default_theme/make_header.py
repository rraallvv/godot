#!/usr/bin/env python

import os
import glob
import string

# Utility functions

def write_pixmaps_data(filenames, file, hidpi):
    pixmaps = glob.glob(filenames)
    pixmaps.sort()

    for x in pixmaps:
        var_str = x[:-4] + "_hidpi_png" if hidpi else x[:-4] + "_png"

        file.write("\nstatic const unsigned char " + var_str + "[] = {\n\t")

        pngf = open(x, "rb")

        b = pngf.read(1)
        while(len(b) == 1):
            file.write(hex(ord(b)))
            b = pngf.read(1)
            if (len(b) == 1):
                file.write(", ")

        file.write("\n};\n")
        pngf.close()

def write_shaders_data(filenames, file):
    shaders = glob.glob(filenames)
    shaders.sort()

    for x in shaders:

        var_str = x[:-4] + "_shader_code"

        file.write("\nstatic const char *" + var_str + " =\n")

        sf = open(x, "rb")

        b = sf.readline()
        while(b != ""):
            if (b.endswith("\r\n")):
                b = b[:-2]
            if (b.endswith("\n")):
                b = b[:-1]
            file.write("\t\t\"" + b)
            b = sf.readline()
            if (b != ""):
                file.write("\"\n")

        file.write("\";\n")
        sf.close()

# Generate include files

f = open("theme_data.h", "wb")

f.write("// THIS FILE HAS BEEN AUTOGENERATED, DONT EDIT!!\n")

f.write("\n#ifndef THEME_DATA_H\n#define THEME_DATA_H\n")

# Generate png image block

f.write("\n// png image block\n");

# 1x resolution images
write_pixmaps_data(filenames="*.png", file=f, hidpi=False)

# 2x resolution images
write_pixmaps_data(filenames="2x/*.png", file=f, hidpi=True)

# Generate shaders block

f.write("\n// shaders block\n");

write_shaders_data(filenames="*.gsl", file=f)

f.write("\n#endif // THEME_DATA_H\n")

f.close()
